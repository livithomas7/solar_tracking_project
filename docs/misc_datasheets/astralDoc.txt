Help on module astral:

NAME
    astral - Calculations for the position of the sun and moon.

FILE
    /home/mihi/.local/lib/python2.7/site-packages/astral.py

DESCRIPTION
    The :mod:`astral` module provides the means to calculate dawn, sunrise,
    solar noon, sunset, dusk and rahukaalam times, plus solar azimuth and
    elevation, for specific locations or at a specific latitude/longitude. It can
    also calculate the moon phase for a specific date.
    
    The module provides 2 main classes :class:`Astral` and :class:`Location`.
    
    :class:`Astral`
        Has 2 main responsibilities
    
        * Calculates the events in the UTC timezone.
        * Provides access to location data
    
    :class:`Location`
        Holds information about a location and provides functions to calculate
        the event times for the location in the correct time zone.
    
    For example ::
    
        >>> from astral import *
        >>> a = Astral()
        >>> location = a['London']
        >>> print('Information for %s' % location.name)
        Information for London
        >>> timezone = location.timezone
        >>> print('Timezone: %s' % timezone)
        Timezone: Europe/London
        >>> print('Latitude: %.02f; Longitude: %.02f' % (location.latitude,
        ... location.longitude))
        Latitude: 51.60; Longitude: 0.05
        >>> from datetime import date
        >>> d = date(2009,4,22)
        >>> sun = location.sun(local=True, date=d)
        >>> print('Dawn:    %s' % str(sun['dawn']))
        Dawn:    2009-04-22 05:12:56+01:00
    
    The module currently provides 2 methods of obtaining location information;
    :class:`AstralGeocoder` (the default, which uses information from within the
    module) and :class:`GoogleGeocoder` (which obtains information from Google's
    Map Service.)
    
    To use the :class:`GoogleGeocoder` pass the class as the `geocoder` parameter
    to :meth:`Astral.__init__` or by setting the `geocoder` property to an
    instance of :class:`GoogleGeocoder`::
    
        >>> from astral import GoogleGeocoder
        >>> a = Astral(GoogleGeocoder)
    
    or ::
    
        >>> from astral import GoogleGeocoder
        >>> a = Astral()
        >>> a.geocoder = GoogleGeocoder()

CLASSES
    __builtin__.object
        Astral
        AstralGeocoder
        GoogleGeocoder
        Location
    exceptions.Exception(exceptions.BaseException)
        AstralError
    
    class Astral(__builtin__.object)
     |  Methods defined here:
     |  
     |  __getitem__(self, key)
     |      Returns the Location instance specified by ``key``.
     |  
     |  __init__(self, geocoder=<class 'astral.AstralGeocoder'>)
     |      Initialise the geocoder and set the default depression.
     |  
     |  blue_hour_utc(self, direction, date, latitude, longitude)
     |      Returns the start and end times of the Blue Hour in the UTC timezone
     |      when the sun is traversing in the specified direction.
     |      
     |      This method uses the definition from PhotoPills i.e. the
     |      blue hour is when the sun is between 6 and 4 degrees below the horizon.
     |      
     |      :param direction:  Determines whether the time is for the sun rising or setting.
     |                         Use ``astral.SUN_RISING`` or ``astral.SUN_SETTING``.
     |      :type direction:   int
     |      :param date: The date for which to calculate the times.
     |      :type date: :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: A tuple of the UTC date and time at which the Blue Hour starts and ends.
     |      :rtype: (:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  dawn_utc(self, date, latitude, longitude, depression=0)
     |      Calculate dawn time in the UTC timezone.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      :param depression: Override the depression used
     |      :type depression:  float
     |      
     |      :return: The UTC date and time at which dawn occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  daylight_utc(self, date, latitude, longitude)
     |      Calculate daylight start and end times in the UTC timezone.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: A tuple of the UTC date and time at which daylight starts and ends.
     |      :rtype: (:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  dusk_utc(self, date, latitude, longitude, depression=0)
     |      Calculate dusk time in the UTC timezone.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      :param depression: Override the depression used
     |      :type depression:   float
     |      
     |      :return: The UTC date and time at which dusk occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  golden_hour_utc(self, direction, date, latitude, longitude)
     |      Returns the start and end times of the Golden Hour in the UTC timezone
     |      when the sun is traversing in the specified direction.
     |      
     |      This method uses the definition from PhotoPills i.e. the
     |      golden hour is when the sun is between 4 degrees below the horizon
     |      and 6 degrees above.
     |      
     |      :param direction:  Determines whether the time is for the sun rising or setting.
     |                         Use ``astral.SUN_RISING`` or ``astral.SUN_SETTING``.
     |      :type direction:   int
     |      :param date: The date for which to calculate the times.
     |      :type date: :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: A tuple of the UTC date and time at which the Golden Hour starts and ends.
     |      :rtype: (:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  moon_phase(self, date, rtype=<type 'int'>)
     |      Calculates the phase of the moon on the specified date.
     |      
     |      :param date: The date to calculate the phase for.
     |      :type date: :class:`datetime.date`
     |      :param rtype: The type to return either int (default) or float.
     |      
     |      :return:
     |          A number designating the phase.
     |      
     |              | 0  = New moon
     |              | 7  = First quarter
     |              | 14 = Full moon
     |              | 21 = Last quarter
     |  
     |  night_utc(self, date, latitude, longitude)
     |      Calculate night start and end times in the UTC timezone.
     |      
     |      Night is calculated to be between astronomical dusk on the
     |      date specified and astronomical dawn of the next day.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: A tuple of the UTC date and time at which night starts and ends.
     |      :rtype: (:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  rahukaalam_utc(self, date, latitude, longitude)
     |      Calculate ruhakaalam times in the UTC timezone.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: Tuple containing the start and end times for Rahukaalam.
     |      :rtype: tuple
     |  
     |  solar_azimuth(self, dateandtime, latitude, longitude)
     |      Calculate the azimuth angle of the sun.
     |      
     |      :param dateandtime: The date and time for which to calculate
     |                          the angle.
     |      :type dateandtime:  :class:`~datetime.datetime`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: The azimuth angle in degrees clockwise from North.
     |      :rtype: float
     |      
     |      If `dateandtime` is a naive Python datetime then it is assumed to be
     |      in the UTC timezone.
     |  
     |  solar_elevation(self, dateandtime, latitude, longitude)
     |      Calculate the elevation angle of the sun.
     |      
     |      :param dateandtime: The date and time for which to calculate
     |                          the angle.
     |      :type dateandtime:  :class:`~datetime.datetime`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: The elevation angle in degrees above the horizon.
     |      :rtype: float
     |      
     |      If `dateandtime` is a naive Python datetime then it is assumed to be
     |      in the UTC timezone.
     |  
     |  solar_midnight_utc(self, date, longitude)
     |      Calculate solar midnight time in the UTC timezone.
     |      
     |      Note that this claculates the solar midgnight that is closest
     |      to 00:00:00 of the specified date i.e. it may return a time that is on
     |      the previous day.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: The UTC date and time at which midnight occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  solar_noon_utc(self, date, longitude)
     |      Calculate solar noon time in the UTC timezone.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: The UTC date and time at which noon occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  solar_zenith(self, dateandtime, latitude, longitude)
     |      Calculates the solar zenith angle.
     |      
     |      :param dateandtime: The date and time for which to calculate
     |                          the angle.
     |      :type dateandtime: :class:`~datetime.datetime`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: The zenith angle in degrees from vertical.
     |      :rtype: float
     |      
     |      If `dateandtime` is a naive Python datetime then it is assumed to be
     |      in the UTC timezone.
     |  
     |  sun_utc(self, date, latitude, longitude)
     |      Calculate all the info for the sun at once.
     |      All times are returned in the UTC timezone.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :returns: Dictionary with keys ``dawn``, ``sunrise``, ``noon``,
     |          ``sunset`` and ``dusk`` whose values are the results of the
     |          corresponding `_utc` methods.
     |      :rtype: dict
     |  
     |  sunrise_utc(self, date, latitude, longitude)
     |      Calculate sunrise time in the UTC timezone.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: The UTC date and time at which sunrise occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  sunset_utc(self, date, latitude, longitude)
     |      Calculate sunset time in the UTC timezone.
     |      
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: The UTC date and time at which sunset occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  time_at_elevation_utc(self, elevation, direction, date, latitude, longitude)
     |      Calculate the time in the UTC timezone when the sun is at
     |      the specified elevation on the specified date.
     |      
     |      Note: This method uses positive elevations for those above the horizon.
     |      
     |      :param elevation:  Elevation in degrees above the horizon to calculate for.
     |      :type elevation:   float
     |      :param direction:  Determines whether the calculated time is for the sun rising or setting.
     |                         Use ``astral.SUN_RISING`` or ``astral.SUN_SETTING``. Default is rising.
     |      :type direction:   int
     |      :param date:       Date to calculate for.
     |      :type date:        :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: The UTC date and time at which the sun is at the required
     |               elevation.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  twilight_utc(self, direction, date, latitude, longitude)
     |      Returns the start and end times of Twilight in the UTC timezone when
     |      the sun is traversing in the specified direction.
     |      
     |      This method defines twilight as being between the time
     |      when the sun is at -6 degrees and sunrise/sunset.
     |      
     |      :param direction:  Determines whether the time is for the sun rising or setting.
     |                         Use ``astral.SUN_RISING`` or ``astral.SUN_SETTING``.
     |      :type direction:   int
     |      :param date: The date for which to calculate the times.
     |      :type date: :class:`datetime.date`
     |      :param latitude:   Latitude - Northern latitudes should be positive
     |      :type latitude:    float
     |      :param longitude:  Longitude - Eastern longitudes should be positive
     |      :type longitude:   float
     |      
     |      :return: A tuple of the UTC date and time at which twilight starts and ends.
     |      :rtype: (:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  solar_depression
     |      The number of degrees the sun must be below the horizon for the
     |      dawn/dusk calculation.
     |      
     |      Can either be set as a number of degrees below the horizon or as
     |      one of the following strings
     |      
     |      ============= =======
     |      String        Degrees
     |      ============= =======
     |      civil            6.0
     |      nautical        12.0
     |      astronomical    18.0
     |      ============= =======
    
    class AstralError(exceptions.Exception)
     |  Astral base exception class
     |  
     |  Method resolution order:
     |      AstralError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class AstralGeocoder(__builtin__.object)
     |  Looks up geographic information from the locations stored within the
     |  module
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, key)
     |  
     |  __getattr__(self, key)
     |      Access to each timezone group. For example London is in timezone
     |      group Europe.
     |      
     |      Attribute lookup is case insensitive
     |  
     |  __getitem__(self, key)
     |      Lookup a location within all timezone groups.
     |      
     |      Item lookup is case insensitive.
     |  
     |  __init__(self)
     |  
     |  __iter__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  groups
     |  
     |  locations
    
    class GoogleGeocoder(__builtin__.object)
     |  Use Google Maps API Web Service to lookup GPS co-ordinates, timezone and
     |  elevation.
     |  
     |  See the following for more info.
     |  https://developers.google.com/maps/documentation/
     |  
     |  Methods defined here:
     |  
     |  __getitem__(self, key)
     |  
     |  __init__(self, cache=False, api_key=u'')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Location(__builtin__.object)
     |  Provides access to information for single location.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, info=None)
     |      Initializes the object with a tuple of information.
     |      
     |      :param info: A tuple of information to fill in the location info.
     |      
     |          The tuple should contain items in the following order
     |      
     |          ================ =============
     |          Field            Default
     |          ================ =============
     |          name             Greenwich
     |          region           England
     |          latitude         51.168
     |          longitude        0
     |          time zone name   Europe/London
     |          elevation        24
     |          ================ =============
     |      
     |          See :attr:`timezone` property for a method of obtaining time zone
     |          names
     |  
     |  __repr__(self)
     |  
     |  blue_hour(self, direction=1, date=None, local=True)
     |      Returns the start and end times of the Blue Hour when the sun is traversing
     |      in the specified direction.
     |      
     |      This method uses the definition from PhotoPills i.e. the
     |      blue hour is when the sun is between 6 and 4 degrees below the horizon.
     |      
     |      :param direction:  Determines whether the time is for the sun rising or setting.
     |                         Use ``astral.SUN_RISING`` or ``astral.SUN_SETTING``. Default is rising.
     |      :type direction:   int
     |      :param date: The date for which to calculate the times.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Times to be returned in location's time zone;
     |                    False = Times to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :return: A tuple of the date and time at which the Blue Hour starts and ends.
     |      :rtype: (:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  dawn(self, date=None, local=True)
     |      Calculates the time in the morning when the sun is a certain number
     |      of degrees below the horizon. By default this is 6 degrees but can be
     |      changed by setting the :attr:`Astral.solar_depression` property.
     |      
     |      :param date: The date for which to calculate the dawn time.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: The date and time at which dawn occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  daylight(self, date=None, local=True)
     |      Calculates the daylight time (the time between sunrise and sunset)
     |      
     |      :param date: The date for which to calculate daylight.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: A tuple containing the start and end times
     |      :rtype: tuple(:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  dusk(self, date=None, local=True)
     |      Calculates the dusk time (the time in the evening when the sun is a
     |      certain number of degrees below the horizon. By default this is 6
     |      degrees but can be changed by setting the
     |      :attr:`solar_depression` property.)
     |      
     |      :param date: The date for which to calculate the dusk time.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: The date and time at which dusk occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  golden_hour(self, direction=1, date=None, local=True)
     |      Returns the start and end times of the Golden Hour when the sun is traversing
     |      in the specified direction.
     |      
     |      This method uses the definition from PhotoPills i.e. the
     |      golden hour is when the sun is between 4 degrees below the horizon
     |      and 6 degrees above.
     |      
     |      :param direction:  Determines whether the time is for the sun rising or setting.
     |                         Use ``astral.SUN_RISING`` or ``astral.SUN_SETTING``. Default is rising.
     |      :type direction:   int
     |      :param date: The date for which to calculate the times.
     |      :type date: :class:`datetime.date`
     |      :param local: True  = Times to be returned in location's time zone;
     |                    False = Times to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :return: A tuple of the date and time at which the Golden Hour starts and ends.
     |      :rtype: (:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  moon_phase(self, date=None, rtype=<type 'int'>)
     |      Calculates the moon phase for a specific date.
     |      
     |      :param date: The date to calculate the phase for.
     |                   If ommitted the current date is used.
     |      :type date: :class:`datetime.date`
     |      
     |      :returns:
     |          A number designating the phase
     |      
     |              | 0  = New moon
     |              | 7  = First quarter
     |              | 14 = Full moon
     |              | 21 = Last quarter
     |  
     |  night(self, date=None, local=True)
     |      Calculates the night time (the time between astronomical dusk and
     |      astronomical dawn of the next day)
     |      
     |      :param date: The date for which to calculate the start of the night time.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: A tuple containing the start and end times
     |      :rtype: tuple(:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  rahukaalam(self, date=None, local=True)
     |      Calculates the period of rahukaalam.
     |      
     |      :param date: The date for which to calculate the rahukaalam period.
     |                   A value of ``None`` uses the current date.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |      
     |      :return: Tuple containing the start and end times for Rahukaalam.
     |      :rtype: tuple
     |  
     |  solar_azimuth(self, dateandtime=None)
     |      Calculates the solar azimuth angle for a specific date/time.
     |      
     |      :param dateandtime: The date and time for which to calculate the angle.
     |      :type dateandtime: :class:`~datetime.datetime`
     |      
     |      :returns: The azimuth angle in degrees clockwise from North.
     |      :rtype: float
     |  
     |  solar_elevation(self, dateandtime=None)
     |      Calculates the solar elevation angle for a specific time.
     |      
     |      :param dateandtime: The date and time for which to calculate the angle.
     |      :type dateandtime: :class:`~datetime.datetime`
     |      
     |      :returns: The elevation angle in degrees above the horizon.
     |      :rtype: float
     |  
     |  solar_midnight(self, date=None, local=True)
     |      Calculates the solar midnight (the time when the sun is at its lowest
     |      point.)
     |      
     |      :param date: The date for which to calculate the midnight time.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: The date and time at which the solar midnight occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  solar_noon(self, date=None, local=True)
     |      Calculates the solar noon (the time when the sun is at its highest
     |      point.)
     |      
     |      :param date: The date for which to calculate the noon time.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: The date and time at which the solar noon occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  solar_zenith(self, dateandtime=None)
     |      Calculates the solar zenith angle for a specific time.
     |      
     |      :param dateandtime: The date and time for which to calculate the angle.
     |      :type dateandtime: :class:`~datetime.datetime`
     |      
     |      :returns: The zenith angle in degrees from vertical.
     |      :rtype: float
     |  
     |  sun(self, date=None, local=True)
     |      Returns dawn, sunrise, noon, sunset and dusk as a dictionary.
     |      
     |      :param date: The date for which to calculate the times.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: Dictionary with keys ``dawn``, ``sunrise``, ``noon``,
     |          ``sunset`` and ``dusk`` whose values are the results of the
     |          corresponding methods.
     |      :rtype: dict
     |  
     |  sunrise(self, date=None, local=True)
     |      Return sunrise time.
     |      
     |      Calculates the time in the morning when the sun is a 0.833 degrees
     |      below the horizon. This is to account for refraction.
     |      
     |      :param date: The date for which to calculate the sunrise time.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: The date and time at which sunrise occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  sunset(self, date=None, local=True)
     |      Calculates sunset time (the time in the evening when the sun is a
     |      0.833 degrees below the horizon. This is to account for refraction.)
     |      
     |      :param date: The date for which to calculate the sunset time.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: The date and time at which sunset occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  time_at_elevation(self, elevation, direction=1, date=None, local=True)
     |      Calculate the time when the sun is at the specified elevation.
     |      
     |      Note:
     |          This method uses positive elevations for those above the horizon.
     |      
     |          Elevations greater than 90 degrees are converted to a setting sun
     |          i.e. an elevation of 110 will calculate a setting sun at 70 degrees.
     |      
     |      :param elevation:  Elevation in degrees above the horizon to calculate for.
     |      :type elevation:   float
     |      :param direction:  Determines whether the time is for the sun rising or setting.
     |                         Use ``astral.SUN_RISING`` or ``astral.SUN_SETTING``. Default is rising.
     |      :type direction:   int
     |      :param date: The date for which to calculate the elevation time.
     |                   If no date is specified then the current date will be used.
     |      
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :returns: The date and time at which dusk occurs.
     |      :rtype: :class:`~datetime.datetime`
     |  
     |  twilight(self, direction=1, date=None, local=True)
     |      Returns the start and end times of Twilight in the UTC timezone when
     |      the sun is traversing in the specified direction.
     |      
     |      This method defines twilight as being between the time
     |      when the sun is at -6 degrees and sunrise/sunset.
     |      
     |      :param direction:  Determines whether the time is for the sun rising or setting.
     |                         Use ``astral.SUN_RISING`` or ``astral.SUN_SETTING``.
     |      :type direction:   int
     |      :param date: The date for which to calculate the times.
     |      :type date: :class:`datetime.date`
     |      :param local: True  = Time to be returned in location's time zone;
     |                    False = Time to be returned in UTC.
     |                    If not specified then the time will be returned in local time
     |      
     |      :return: A tuple of the UTC date and time at which twilight starts and ends.
     |      :rtype: (:class:`~datetime.datetime`, :class:`~datetime.datetime`)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  elevation
     |      The elevation in metres above sea level.
     |  
     |  latitude
     |      The location's latitude
     |      
     |      ``latitude`` can be set either as a string or as a number
     |      
     |      For strings they must be of the form
     |      
     |          degrees°minutes'[N|S] e.g. 51°31'N
     |      
     |      For numbers, positive numbers signify latitudes to the North.
     |  
     |  longitude
     |      The location's longitude.
     |      
     |      ``longitude`` can be set either as a string or as a number
     |      
     |      For strings they must be of the form
     |      
     |          degrees°minutes'[E|W] e.g. 51°31'W
     |      
     |      For numbers, positive numbers signify longitudes to the East.
     |  
     |  solar_depression
     |      The number of degrees the sun must be below the horizon for the
     |      dawn/dusk calculation.
     |      
     |      Can either be set as a number of degrees below the horizon or as
     |      one of the following strings
     |      
     |      ============= =======
     |      String        Degrees
     |      ============= =======
     |      civil            6.0
     |      nautical        12.0
     |      astronomical    18.0
     |      ============= =======
     |  
     |  timezone
     |      The name of the time zone for the location.
     |      
     |      A list of time zone names can be obtained from pytz. For example.
     |      
     |      >>> from pytz import all_timezones
     |      >>> for timezone in all_timezones:
     |      ...     print(timezone)
     |  
     |  tz
     |      Time zone information.
     |  
     |  tzinfo
     |      Time zone information.

DATA
    __all__ = [u'Astral', u'Location', u'AstralGeocoder', u'GoogleGeocoder...
    __author__ = u'Simon Kennedy <sffjunkie+code@gmail.com>'
    __version__ = u'1.6.1'

VERSION
    1.6.1

AUTHOR
    Simon Kennedy <sffjunkie+code@gmail.com>


